apiVersion: v1
kind: Secret
metadata:
  name: connection-sql
  namespace: app
type: Opaque
stringData:
  JDBC_DATABASE_URL: jdbc:mysql://mysql:3306/tienda-vn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: app
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: juanmaespi7/tecnoshop-front:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
  namespace: app
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      NodePort: 30080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: app
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: juanmaespi7/tecnoshop-back:latest
          ports:
            - containerPort: 8080
          env:
            - name: JDBC_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: connection-sql
                  key: JDBC_DATABASE_URL
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
  namespace: app
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: scrapping
#  namespace: app
#  labels:
#    app: scrapping
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: scrapping
#  template:
#    metadata:
#      labels:
#        app: scrapping
#    spec:
#      containers:
#        - name: scrapping
#          image: scrapping:latest
#          env:
#            - name: DB_NAME
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: dbname
#            - name: DB_USER
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: username
#            - name: DB_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: password
#            - name: DB_HOST
#              value: mysql
#            - name: DB_PORT
#              value: '3306'
#            - name: OLLAMA_HOST
#              value: ollama
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
        - name: ollama
          image: ollama/ollama:latest
          ports:
            - containerPort: 11434
          command: ['/bin/sh', '-c']
          args:
            - |
              ollama serve &
              sleep 3
              ollama pull mistral
              tail -f /dev/null
          volumeMounts:
            - name: ollama-data
              mountPath: /root/.ollama
      volumes:
        - name: ollama-data
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: ollama
  labels:
    app: ollama
  namespace: app
spec:
  type: ClusterIP
  selector:
    app: ollama
  ports:
    - protocol: TCP
      port: 11434
      targetPort: 11434
